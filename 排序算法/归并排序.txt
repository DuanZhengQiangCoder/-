#include <iostream>
using namespace std;
// 合并两个子数组，一个包含arr[l..m]，另一个包含arr[m+1..r]
void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    // 创建临时数组来存储子数组
    int* leftArr = new int[n1];
    int* rightArr = new int[n2];

    // 拷贝数据到临时数组 leftArr[] 和 rightArr[]
    for (int i = 0; i < n1; i++) {
        leftArr[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        rightArr[j] = arr[m + 1 + j];
    }

    // 合并临时数组到 arr[l..r]
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        }
        else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    // 复制任何剩余的元素
    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }

    // 释放临时数组的内存
    delete[] leftArr;
    delete[] rightArr;
}

// 归并排序主函数，递归地将数组拆分成子数组并进行合并
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        // 寻找中间点
        int m = l + (r - l) / 2;

        // 递归排序左半部分和右半部分
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        // 合并已排序的子数组
        merge(arr, l, m, r);
    }
}

int main() {
    int arr[] = { 12, 11, 13, 5, 6, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "原始数组: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    mergeSort(arr, 0, n - 1);

    cout << "归并排序后的数组: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}

//打印值为x的结点的所有祖先结点，采用非递归后序遍历的思想(两个栈，一个是辅助栈，一个是右子树是否遍历栈)
void printAncestors(BiTree T,int x){
	initStack(S1)；//辅助栈用于存储结点，设为结点类型
	initStack(S2);//右子树是否遍历，设为bool类型,
	if(T==NULL){
		return;
	}
	TreeNode *p=T;
	while(!isEmpty(S1)||p!=NULL){
		//遍历左子树，将结点和访问标记入栈
		while(p!=NULL){
			Push(S1,p);
			Push(S2,false);
			p=p->left;
		}
		if(!IsEmpty(S1)){
			TreeNode *node=S1.top();
			bool visited =S2.top();
			if(visited!=false){
				//如果结点已经访问过右子树，可以访问当前结点
				if(node->data==x){
				printStack(S1); //祖先结点就是后面的结点
			}
				//如果结点的值不是x
				Pop(S1);
				Pop(S2);
		}
			else{
				//如果结点未访问右子树，标记为已访问，并遍历右子树
				Pop(S2);
				Push(S2,true);
				p=p->right;
			}	
		}
	}
}
		